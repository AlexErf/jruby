package org.jruby.ir.persistence.read.parser;

import java.util.ArrayList;
import beaver.*;
import org.jruby.ir.operands.Operand;
import org.jruby.ir.persistence.read.parser.dummy.InstrWithParams;
import org.jruby.ir.IRScope;
import org.jruby.ir.instructions.Instr;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "persisted_ir.grammar".
 */
public class PersistedIRParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short EOLN = 1;
		static public final short ID = 2;
		static public final short STRING = 3;
		static public final short LBRACK = 4;
		static public final short FIXNUM = 5;
		static public final short FLOAT = 6;
		static public final short BOOLEAN = 7;
		static public final short NULL = 8;
		static public final short COMMA = 9;
		static public final short RBRACK = 10;
		static public final short LPAREN = 11;
		static public final short LBRACE = 12;
		static public final short EQ = 13;
		static public final short LT = 14;
		static public final short GT = 15;
		static public final short RPAREN = 16;
		static public final short RBRACE = 17;
		static public final short DEAD_INSTR_MARKER = 18;
		static public final short DEAD_RESULT_INSTR_MARKER = 19;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9oLbCTJ554GXtypko9f4OHbMH1PS5qM3AWOG14FbYUhF7hoOfMOginbE7WmbPR$eJddd3E" +
		"qtpoUr6DBe9YjxtMOdlUwUwPNqdMjqb9rQR5ATajz6j5wBTHQrQjVYzIeM6dLJCRO3QKqHC" +
		"m28ePKEnMpN4jKK9loQbUdDjhz2izqA#VEAwf3osQDwmuYcmEzDz0tUxrL7MRAsbSDsayre" +
		"TrJYmPLfQogeKbrocYBVLQ3VL5P9VLefLPeG6kqcjhNsGzjq2ODsnzjvSaiEzPHNuPCEiYg" +
		"qvrI8ASUiYwIwMHCdo8wrEuYuY0cfbDf#bH5fwhPeRR2CzsQt2ldAfyjhZmjScvTlBc87P8" +
		"SQyYXqUarZfYrnDkBg3wYF$NSRwQtIJKPQe$yhy6jqkW5kIiFMJWC##28zn#3ut00JdhV69" +
		"o6iucTO4QVHHtI7XypyE$UN71rmGclx$NoA8p0mI3kKA2VWlDmnjiNlRm4bxr#nSjpi1tsm" +
		"rMu5kJz1f5998o7UNdVH73chXdo7mxqdVEekpY3Vrk5lRl27fl76Jl#unjLSDclAUsRbv$i" +
		"etrmsajuRi$igJsnn$R87je3ksEttRsxy8B$baI$QU$j7VrwwwpNzehrkzD$mtXmsWHBB$E" +
		"LOjvYI355QIOlXXJpbcBY8kOmXXHViY1Y0cE#aiZHxUbrEqLkAWl49hIpLnvV7Zs7d8daIo" +
		"qZsuXhGIPaePNd#$y2Amsu4m==");

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};


    private PersistedIRParserLogic logic;

    public void init(IRParsingContext context) {
        logic = new PersistedIRParserLogic(context);
    }

	private final Action[] actions;

	public PersistedIRParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] scopes = scopes_info.scope EOLN scopes_instructions.instrs
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol scope = _symbols[offset + 1];
					final Symbol instrs = _symbols[offset + 3];
					 return logic.getToplevelScope();
				}
			},
			RETURN2,	// [1] scopes_info = scope_info EOLN; returns 'EOLN' although none is marked
			RETURN3,	// [2] scopes_info = scopes_info scope_info EOLN; returns 'EOLN' although none is marked
			new Action() {	// [3] scope_info = ID.type LT parameter_list.params GT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_type = _symbols[offset + 1];
					final String type = (String) _symbol_type.value;
					final Symbol _symbol_params = _symbols[offset + 3];
					final ArrayList<Object> params = (ArrayList<Object>) _symbol_params.value;
					 return logic.createScope(type, params);
				}
			},
			RETURN2,	// [4] scopes_instructions = scope_instructions EOLN; returns 'EOLN' although none is marked
			RETURN3,	// [5] scopes_instructions = scopes_instructions scope_instructions EOLN; returns 'EOLN' although none is marked
			new Action() {	// [6] scope_instructions = scope_descriptor.scope EOLN instruction_list.instrs
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_scope = _symbols[offset + 1];
					final IRScope scope = (IRScope) _symbol_scope.value;
					final Symbol _symbol_instrs = _symbols[offset + 3];
					final ArrayList<Instr> instrs = (ArrayList<Instr>) _symbol_instrs.value;
					 return logic.addToScope(scope, instrs);
				}
			},
			new Action() {	// [7] scope_descriptor = STRING.name
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_name = _symbols[offset + 1];
					final String name = (String) _symbol_name.value;
					 return logic.enterScope(name);
				}
			},
			new Action() {	// [8] instruction_list = abstract_instruction.i EOLN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final Instr i = (Instr) _symbol_i.value;
					 return logic.addFirstInstruction(i);
				}
			},
			new Action() {	// [9] instruction_list = instruction_list.lst abstract_instruction.i EOLN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_lst = _symbols[offset + 1];
					final ArrayList<Instr> lst = (ArrayList<Instr>) _symbol_lst.value;
					final Symbol _symbol_i = _symbols[offset + 2];
					final Instr i = (Instr) _symbol_i.value;
					 return logic.addFollowingInstructions(lst, i, _symbol_lst);
				}
			},
			Action.NONE,  	// [10] opt$DEAD_INSTR_MARKER = 
			Action.RETURN,	// [11] opt$DEAD_INSTR_MARKER = DEAD_INSTR_MARKER
			new Action() {	// [12] abstract_instruction = instruction.instr opt$DEAD_INSTR_MARKER.marker
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol instr = _symbols[offset + 1];
					final Symbol marker = _symbols[offset + 2];
					 return logic.markAsDeadIfNeeded(instr, marker);
				}
			},
			Action.RETURN,	// [13] instruction = simple_instr
			Action.RETURN,	// [14] instruction = abstract_result_instr
			new Action() {	// [15] simple_instr = ID.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 1];
					final String id = (String) _symbol_id.value;
					 return logic.createInstrWithoutParams(id);
				}
			},
			new Action() {	// [16] simple_instr = instr_with_params.instr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_instr = _symbols[offset + 1];
					final InstrWithParams instr = (InstrWithParams) _symbol_instr.value;
					 return logic.createInstrWithParams(instr);
				}
			},
			Action.NONE,  	// [17] opt$DEAD_RESULT_INSTR_MARKER = 
			Action.RETURN,	// [18] opt$DEAD_RESULT_INSTR_MARKER = DEAD_RESULT_INSTR_MARKER
			new Action() {	// [19] abstract_result_instr = result_instr.instr opt$DEAD_RESULT_INSTR_MARKER.marker
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol instr = _symbols[offset + 1];
					final Symbol marker = _symbols[offset + 2];
					 return logic.markHasUnusedResultIfNeeded(instr, marker);
				}
			},
			new Action() {	// [20] result_instr = operand.var EQ ID.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_var = _symbols[offset + 1];
					final Operand var = (Operand) _symbol_var.value;
					final Symbol _symbol_id = _symbols[offset + 3];
					final String id = (String) _symbol_id.value;
					 return logic.createReturnInstrWithNoParams(var, id);
				}
			},
			new Action() {	// [21] result_instr = operand.var EQ instr_with_params.instr
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_var = _symbols[offset + 1];
					final Operand var = (Operand) _symbol_var.value;
					final Symbol _symbol_instr = _symbols[offset + 3];
					final InstrWithParams instr = (InstrWithParams) _symbol_instr.value;
					 return logic.createReturnInstrWithParams(var, instr);
				}
			},
			new Action() {	// [22] instr_with_params = ID.id LPAREN parameter_list.list RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 1];
					final String id = (String) _symbol_id.value;
					final Symbol _symbol_list = _symbols[offset + 3];
					final ArrayList<Object> list = (ArrayList<Object>) _symbol_list.value;
					 return logic.createInstrWithParams(id, list);
				}
			},
			new Action() {	// [23] parameter_list = param.p1
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_p1 = _symbols[offset + 1];
					final Object p1 = (Object) _symbol_p1.value;
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			new Action() {	// [24] parameter_list = parameter_list.list COMMA param.p
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final ArrayList<Object> list = (ArrayList<Object>) _symbol_list.value;
					final Symbol _symbol_p = _symbols[offset + 3];
					final Object p = (Object) _symbol_p.value;
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			Action.RETURN,	// [25] param = operand
			Action.RETURN,	// [26] param = FIXNUM.val
			Action.RETURN,	// [27] param = FLOAT.val
			Action.RETURN,	// [28] param = BOOLEAN.bool
			Action.RETURN,	// [29] param = list
			Action.RETURN,	// [30] param = STRING
			new Action() {	// [31] param = NULL
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return logic.createNull();
				}
			},
			Action.NONE,  	// [32] opt$parameter_list = 
			Action.RETURN,	// [33] opt$parameter_list = parameter_list
			new Action() {	// [34] list = LBRACK opt$parameter_list.params RBRACK
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_params = _symbols[offset + 2];
					final ArrayList<Object> params = (ArrayList<Object>) _symbol_params.value;
					 return logic.createList(params);
				}
			},
			Action.RETURN,	// [35] operand = operand_without_parameters
			Action.RETURN,	// [36] operand = operand_with_parameters
			new Action() {	// [37] operand_without_parameters = ID.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 1];
					final String id = (String) _symbol_id.value;
					 return logic.createOperandWithoutParameters(id);
				}
			},
			new Action() {	// [38] operand_with_parameters = ID.id LBRACE parameter_list.params RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 1];
					final String id = (String) _symbol_id.value;
					final Symbol _symbol_params = _symbols[offset + 3];
					final ArrayList<Object> params = (ArrayList<Object>) _symbol_params.value;
					 return logic.createOperandWithParameters(id, params);
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
