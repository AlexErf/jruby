<!--#set var="TITLE" value="JRuby Milestones" -->
<!--#set var="SUB" value="yes" -->
<!--#include virtual="../_header.shtml" -->
    <h1>Milestones</h1>

  JRuby is an alternate implementation of the ruby scripting language.  It
is different from the C reference implementation of ruby in that it:

<ul>
<li>Is implemented on top of the Java Vritual Machine in Java</li>
<li>Has Java integration features</li>
<li>Can not load ruby external modules (native shared libraries)
</ul>

  This document will discuss when and in what order features are likely to
be implemented in JRuby.  This document is dynamic and may change depending
on external circumstances (like someone deciding to implement a later feature
sooner).<p/>

  The goal from this point on in the project is to put out a release every
1.5-2 months.  These releases will be point releases on the current point
release until all features have been implemented for the next major point 
release (e.g. After 0.8 will come 0.8.1, 0.8.2, ... until all 0.9 features
are done).</p>

  If new features are needed (or discovered) then they can be added to the
next point release.  The jruby-devel mailing list is the appropriate place
to start a discussion about doing new work and integrating it into a
future release.</p>

   <h2>JRuby 0.8 (Late January, 2005)</h2>
   <ul>
   <li>Ruby 1.8.2 grammar complete</li> 
   <li>Enough 1.8.2 core libraries implemented to adequately run rubicon</li>
   <li>Relicense to GPL/LGPL/CPL</li>
   </ul>

   <h3>JRuby 0.8.1 (Released Apr 11, 2005)</h3>
   <ul>
   <li>Make Java collections and native Ruby collections more transparent</li>
      <ul>
      <li>From ruby scripting</li>
      <li>From java programming</li>
      </ul>
   <li>Address constant scoping issues (this may be a lot larger than it 
     sounds)</li>
   <li>Some basic distribution of 'rb' files so we do not need to link
     to an existing ruby distribution (which would be nice to be in a
     jar).</li>
   </ul>

   <h3>JRuby 0.8.2 (mid September 2005)</h3>
   <ul>
   <li>RubyArray implements java.util.List</li>
   <li>RubyHash implements java.util.Map</li>
   <li>Some parts of socket.rb working</li>
   <li>digest implemented</li>
   <li>Squash all known concurrency problems (using ruby threads)</li>
   <li>Squash remaining block passing problems</li>
   </ul> 

   <h3>JRuby 0.8.3 (late December 2005)</h3>
   <ul>
   <li>Java included classes/modules will lazily create proxy methods as used (dramatically speeds up swing examples) [<a href="http://sourceforge.net/tracker/index.php?func=detail&aid=1305012&group_id=35413&atid=413912">1305012</a>]</li>
   <li>Ruby classes which extend Java one can override methods in a way that Java consumers can see</li>
   <li>Merge TOM_RDT_POSITION branch to trunk</li>
   <li>Fix constant scoping problem [<a href="http://sourceforge.net/tracker/index.php?func=detail&aid=1303983&group_id=35413&atid=413912">1303983</a>]</li>
   <li>Create an extended Java File type to deal with cwd changing and forward-slash versus backslash semantics [<a href="http://sourceforge.net/tracker/index.php?func=detail&aid=1280905&group_id=35413&atid=413912">1280905</a>]</li>
   <li>Make sure arbitrary java threads have a way of using BSF returned values[<a href="http://sourceforge.net/tracker/index.php?func=detail&aid=1305005&group_id=35413&atid=413912">1305005</a>]</li>
   <li>More parts of socket.rb working</li>
   <li>Support Bindings</li>
   <ul>
     <li>Make all stacks obey java.util.Stack semantics</li>
   </ul>
   <li>Ability for multiple java native threads to call methods on a ruby object concurrently</li>
   <li>More conversion to having class have its own MetaClass</li>
   <li>Merge RDT Position branch with head</li>
   <li>Make parser more accessible for JRuby hackers/embedders</li>
   <li>yaml</li>
   <li>zlib</li>
   <li>Make JDBC connector for RoR ActiveRecord</li>
   <li>updated evalautor</li>
   </ul>

   <h3>JRuby 0.8.4 (late March 2006)</h3>
   <ul>
   <li>Proc#arity problems</li>
   <li>Rubygems working</li>
   <li>Webrick working</li>
   <li>Ruby on Rails working</li>
   </ul>

   <h2>JRuby 0.9 (????)</h2>
   <ul>
   <li>Full support for socket.rb</li>
   <li>Continuations</li>
   <li>Pipes</li>
   </ul>

   <h2>JRuby 1.0 (????)</h2>
   <ul>
   <li>Ability to write java classes from jruby scripting environment (this
     requires ability to compile classes)</li>
   <li>Extend abstract classes (needed for some part of swing)</li>
   <li>Swing-based example app which is an interactive ruby shell.</li>
   <li>1.8.x core library complete (of things java can realistically support
   </li>
   <li>Ability to pass rubicon 100% (by this point, this statement is more 
     about updating rubicon to exempt us from certain tests than it is about
     JRuby not passing tests)
   </ul>

   <h2>Futures/Intangibles</h2>
   <ul>
   <li>Large performance focus.  Having a complete ruby implmentation is the
     best place to start looking at large refactoring issues to get better
     performance (IMHO).  This is not to say we will not positively affect
     performance on the way to 1.0.  I just would rather have us reach a
     full implementation as fast as we can.</li>
   <li> Change to a pure-java grammar tool (like Antlr), this can also kill
     our hand-crafted lexer</li>
   <li>Less stack happy evaluation engine (make things more iterative or
     at least implement tail recursion)</li>
   </ul>

<!--#include virtual="../_footer.shtml" -->
